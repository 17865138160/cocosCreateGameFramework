import { Writer, Reader } from 'protobufjs/minimal';
import { FileDescriptorProto, GeneratedCodeInfo } from '../../../google/protobuf/descriptor';
/** The version number of protocol compiler. */
export interface Version {
    major: number;
    minor: number;
    patch: number;
    /**
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     */
    suffix: string;
}
/** An encoded CodeGeneratorRequest is written to the plugin's stdin. */
export interface CodeGeneratorRequest {
    /**
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     */
    fileToGenerate: string[];
    /** The generator parameter passed on the command-line. */
    parameter: string;
    /**
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     *
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     *
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     */
    protoFile: FileDescriptorProto[];
    /** The version number of protocol compiler. */
    compilerVersion: Version | undefined;
}
/** The plugin writes an encoded CodeGeneratorResponse to stdout. */
export interface CodeGeneratorResponse {
    /**
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     *
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     */
    error: string;
    /**
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     */
    supportedFeatures: number;
    file: CodeGeneratorResponse_File[];
}
/** Sync with code_generator.h. */
export declare enum CodeGeneratorResponse_Feature {
    FEATURE_NONE = 0,
    FEATURE_PROTO3_OPTIONAL = 1,
    UNRECOGNIZED = -1
}
export declare function codeGeneratorResponse_FeatureFromJSON(object: any): CodeGeneratorResponse_Feature;
export declare function codeGeneratorResponse_FeatureToJSON(object: CodeGeneratorResponse_Feature): string;
/** Represents a single generated file. */
export interface CodeGeneratorResponse_File {
    /**
     * The file name, relative to the output directory.  The name must not
     * contain "." or ".." components and must be relative, not be absolute (so,
     * the file cannot lie outside the output directory).  "/" must be used as
     * the path separator, not "\".
     *
     * If the name is omitted, the content will be appended to the previous
     * file.  This allows the generator to break large files into small chunks,
     * and allows the generated text to be streamed back to protoc so that large
     * files need not reside completely in memory at one time.  Note that as of
     * this writing protoc does not optimize for this -- it will read the entire
     * CodeGeneratorResponse before writing files to disk.
     */
    name: string;
    /**
     * If non-empty, indicates that the named file should already exist, and the
     * content here is to be inserted into that file at a defined insertion
     * point.  This feature allows a code generator to extend the output
     * produced by another code generator.  The original generator may provide
     * insertion points by placing special annotations in the file that look
     * like:
     *   @@protoc_insertion_point(NAME)
     * The annotation can have arbitrary text before and after it on the line,
     * which allows it to be placed in a comment.  NAME should be replaced with
     * an identifier naming the point -- this is what other generators will use
     * as the insertion_point.  Code inserted at this point will be placed
     * immediately above the line containing the insertion point (thus multiple
     * insertions to the same point will come out in the order they were added).
     * The double-@ is intended to make it unlikely that the generated code
     * could contain things that look like insertion points by accident.
     *
     * For example, the C++ code generator places the following line in the
     * .pb.h files that it generates:
     *   // @@protoc_insertion_point(namespace_scope)
     * This line appears within the scope of the file's package namespace, but
     * outside of any particular class.  Another plugin can then specify the
     * insertion_point "namespace_scope" to generate additional classes or
     * other declarations that should be placed in this scope.
     *
     * Note that if the line containing the insertion point begins with
     * whitespace, the same whitespace will be added to every line of the
     * inserted text.  This is useful for languages like Python, where
     * indentation matters.  In these languages, the insertion point comment
     * should be indented the same amount as any inserted code will need to be
     * in order to work correctly in that context.
     *
     * The code generator that generates the initial file and the one which
     * inserts into it must both run as part of a single invocation of protoc.
     * Code generators are executed in the order in which they appear on the
     * command line.
     *
     * If |insertion_point| is present, |name| must also be present.
     */
    insertionPoint: string;
    /** The file contents. */
    content: string;
    /**
     * Information describing the file content being inserted. If an insertion
     * point is used, this information will be appropriately offset and inserted
     * into the code generation metadata for the generated files.
     */
    generatedCodeInfo: GeneratedCodeInfo | undefined;
}
export declare const Version: {
    encode(message: Version, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): Version;
    fromJSON(object: any): Version;
    toJSON(message: Version): unknown;
    fromPartial<I extends {
        major?: number;
        minor?: number;
        patch?: number;
        suffix?: string;
    } & {
        major?: number;
        minor?: number;
        patch?: number;
        suffix?: string;
    } & Record<Exclude<keyof I, "major" | "minor" | "patch" | "suffix">, never>>(object: I): Version;
};
export declare const CodeGeneratorRequest: {
    encode(message: CodeGeneratorRequest, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CodeGeneratorRequest;
    fromJSON(object: any): CodeGeneratorRequest;
    toJSON(message: CodeGeneratorRequest): unknown;
    fromPartial<I extends {
        fileToGenerate?: string[];
        parameter?: string;
        protoFile?: {
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../descriptor").FieldDescriptorProto_Label;
                type?: import("../descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                proto3Optional?: boolean;
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        }[];
        compilerVersion?: {
            major?: number;
            minor?: number;
            patch?: number;
            suffix?: string;
        };
    } & {
        fileToGenerate?: string[] & string[] & Record<Exclude<keyof I["fileToGenerate"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
        parameter?: string;
        protoFile?: {
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../descriptor").FieldDescriptorProto_Label;
                type?: import("../descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                proto3Optional?: boolean;
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        }[] & ({
            name?: string;
            package?: string;
            dependency?: string[];
            publicDependency?: number[];
            weakDependency?: number[];
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[];
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[];
            extension?: {
                name?: string;
                number?: number;
                label?: import("../descriptor").FieldDescriptorProto_Label;
                type?: import("../descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                proto3Optional?: boolean;
            }[];
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            };
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            };
            syntax?: string;
        } & {
            name?: string;
            package?: string;
            dependency?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["dependency"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            publicDependency?: number[] & number[] & Record<Exclude<keyof I["protoFile"][number]["publicDependency"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            weakDependency?: number[] & number[] & Record<Exclude<keyof I["protoFile"][number]["weakDependency"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            messageType?: {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[] & ({
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[];
                nestedType?: any[];
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[];
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            } & {
                name?: string;
                field?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[] & ({
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                } & {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                    proto3Optional?: boolean;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                extension?: {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                }[] & ({
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    proto3Optional?: boolean;
                } & {
                    name?: string;
                    number?: number;
                    label?: import("../descriptor").FieldDescriptorProto_Label;
                    type?: import("../descriptor").FieldDescriptorProto_Type;
                    typeName?: string;
                    extendee?: string;
                    defaultValue?: string;
                    oneofIndex?: number;
                    jsonName?: string;
                    options?: {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        ctype?: import("../descriptor").FieldOptions_CType;
                        packed?: boolean;
                        jstype?: import("../descriptor").FieldOptions_JSType;
                        lazy?: boolean;
                        deprecated?: boolean;
                        weak?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                    proto3Optional?: boolean;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                nestedType?: {
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    }[];
                    nestedType?: any[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[] & ({
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    }[];
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    }[];
                    nestedType?: any[];
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[];
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                } & {
                    name?: string;
                    field?: {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    }[] & ({
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    } & {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                        proto3Optional?: boolean;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    extension?: {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    }[] & ({
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        proto3Optional?: boolean;
                    } & {
                        name?: string;
                        number?: number;
                        label?: import("../descriptor").FieldDescriptorProto_Label;
                        type?: import("../descriptor").FieldDescriptorProto_Type;
                        typeName?: string;
                        extendee?: string;
                        defaultValue?: string;
                        oneofIndex?: number;
                        jsonName?: string;
                        options?: {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            ctype?: import("../descriptor").FieldOptions_CType;
                            packed?: boolean;
                            jstype?: import("../descriptor").FieldOptions_JSType;
                            lazy?: boolean;
                            deprecated?: boolean;
                            weak?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                        proto3Optional?: boolean;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    nestedType?: {
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        }[];
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        }[];
                        nestedType?: any[];
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[];
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[] & ({
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        }[];
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        }[];
                        nestedType?: any[];
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[];
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    } & {
                        name?: string;
                        field?: {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        }[] & ({
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        } & {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                            proto3Optional?: boolean;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        extension?: {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        }[] & ({
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            proto3Optional?: boolean;
                        } & {
                            name?: string;
                            number?: number;
                            label?: import("../descriptor").FieldDescriptorProto_Label;
                            type?: import("../descriptor").FieldDescriptorProto_Type;
                            typeName?: string;
                            extendee?: string;
                            defaultValue?: string;
                            oneofIndex?: number;
                            jsonName?: string;
                            options?: {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                ctype?: import("../descriptor").FieldOptions_CType;
                                packed?: boolean;
                                jstype?: import("../descriptor").FieldOptions_JSType;
                                lazy?: boolean;
                                deprecated?: boolean;
                                weak?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                            proto3Optional?: boolean;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        nestedType?: {
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            }[];
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            }[];
                            nestedType?: any[];
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[];
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[] & ({
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            }[];
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            }[];
                            nestedType?: any[];
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[];
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        } & {
                            name?: string;
                            field?: {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            }[] & ({
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            } & {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                proto3Optional?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            extension?: {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            }[] & ({
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                proto3Optional?: boolean;
                            } & {
                                name?: string;
                                number?: number;
                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                typeName?: string;
                                extendee?: string;
                                defaultValue?: string;
                                oneofIndex?: number;
                                jsonName?: string;
                                options?: {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    ctype?: import("../descriptor").FieldOptions_CType;
                                    packed?: boolean;
                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                    lazy?: boolean;
                                    deprecated?: boolean;
                                    weak?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                proto3Optional?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            nestedType?: {
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                }[];
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                }[];
                                nestedType?: any[];
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[];
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[] & ({
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                }[];
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                }[];
                                nestedType?: any[];
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[];
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            } & {
                                name?: string;
                                field?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                }[] & ({
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                } & {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                    proto3Optional?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                extension?: {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                }[] & ({
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    proto3Optional?: boolean;
                                } & {
                                    name?: string;
                                    number?: number;
                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                    typeName?: string;
                                    extendee?: string;
                                    defaultValue?: string;
                                    oneofIndex?: number;
                                    jsonName?: string;
                                    options?: {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        ctype?: import("../descriptor").FieldOptions_CType;
                                        packed?: boolean;
                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                        lazy?: boolean;
                                        deprecated?: boolean;
                                        weak?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                    proto3Optional?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                nestedType?: {
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    }[];
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    }[];
                                    nestedType?: any[];
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[];
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[] & ({
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    }[];
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    }[];
                                    nestedType?: any[];
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[];
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                } & {
                                    name?: string;
                                    field?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    }[] & ({
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    } & {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                        proto3Optional?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    extension?: {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    }[] & ({
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        proto3Optional?: boolean;
                                    } & {
                                        name?: string;
                                        number?: number;
                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                        typeName?: string;
                                        extendee?: string;
                                        defaultValue?: string;
                                        oneofIndex?: number;
                                        jsonName?: string;
                                        options?: {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            ctype?: import("../descriptor").FieldOptions_CType;
                                            packed?: boolean;
                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                            lazy?: boolean;
                                            deprecated?: boolean;
                                            weak?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                        proto3Optional?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    nestedType?: {
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        }[];
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        }[];
                                        nestedType?: any[];
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[];
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[] & ({
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        }[];
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        }[];
                                        nestedType?: any[];
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[];
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    } & {
                                        name?: string;
                                        field?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        }[] & ({
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        } & {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                            proto3Optional?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        extension?: {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        }[] & ({
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            proto3Optional?: boolean;
                                        } & {
                                            name?: string;
                                            number?: number;
                                            label?: import("../descriptor").FieldDescriptorProto_Label;
                                            type?: import("../descriptor").FieldDescriptorProto_Type;
                                            typeName?: string;
                                            extendee?: string;
                                            defaultValue?: string;
                                            oneofIndex?: number;
                                            jsonName?: string;
                                            options?: {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                ctype?: import("../descriptor").FieldOptions_CType;
                                                packed?: boolean;
                                                jstype?: import("../descriptor").FieldOptions_JSType;
                                                lazy?: boolean;
                                                deprecated?: boolean;
                                                weak?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                            proto3Optional?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        nestedType?: {
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            }[];
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            }[];
                                            nestedType?: any[];
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[];
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[] & ({
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            }[];
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            }[];
                                            nestedType?: any[];
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[];
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        } & {
                                            name?: string;
                                            field?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            }[] & ({
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            } & {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                                proto3Optional?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            extension?: {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            }[] & ({
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                proto3Optional?: boolean;
                                            } & {
                                                name?: string;
                                                number?: number;
                                                label?: import("../descriptor").FieldDescriptorProto_Label;
                                                type?: import("../descriptor").FieldDescriptorProto_Type;
                                                typeName?: string;
                                                extendee?: string;
                                                defaultValue?: string;
                                                oneofIndex?: number;
                                                jsonName?: string;
                                                options?: {
                                                    ctype?: import("../descriptor").FieldOptions_CType;
                                                    packed?: boolean;
                                                    jstype?: import("../descriptor").FieldOptions_JSType;
                                                    lazy?: boolean;
                                                    deprecated?: boolean;
                                                    weak?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                                                proto3Optional?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            nestedType?: {
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                }[];
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                }[];
                                                nestedType?: any[];
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[];
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[] & ({
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                }[];
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                }[];
                                                nestedType?: any[];
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[];
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            } & {
                                                name?: string;
                                                field?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                }[] & ({
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["field"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                extension?: {
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                }[] & ({
                                                    name?: string;
                                                    number?: number;
                                                    label?: import("../descriptor").FieldDescriptorProto_Label;
                                                    type?: import("../descriptor").FieldDescriptorProto_Type;
                                                    typeName?: string;
                                                    extendee?: string;
                                                    defaultValue?: string;
                                                    oneofIndex?: number;
                                                    jsonName?: string;
                                                    options?: {
                                                        ctype?: import("../descriptor").FieldOptions_CType;
                                                        packed?: boolean;
                                                        jstype?: import("../descriptor").FieldOptions_JSType;
                                                        lazy?: boolean;
                                                        deprecated?: boolean;
                                                        weak?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    proto3Optional?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                nestedType?: {
                                                    name?: string;
                                                    field?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        proto3Optional?: boolean;
                                                    }[];
                                                    extension?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        proto3Optional?: boolean;
                                                    }[];
                                                    nestedType?: any[];
                                                    enumType?: {
                                                        name?: string;
                                                        value?: {
                                                            name?: string;
                                                            number?: number;
                                                            options?: {
                                                                deprecated?: boolean;
                                                                uninterpretedOption?: {
                                                                    name?: {
                                                                        namePart?: string;
                                                                        isExtension?: boolean;
                                                                    }[];
                                                                    identifierValue?: string;
                                                                    positiveIntValue?: number;
                                                                    negativeIntValue?: number;
                                                                    doubleValue?: number;
                                                                    stringValue?: Uint8Array;
                                                                    aggregateValue?: string;
                                                                }[];
                                                            };
                                                        }[];
                                                        options?: {
                                                            allowAlias?: boolean;
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        reservedRange?: {
                                                            start?: number;
                                                            end?: number;
                                                        }[];
                                                        reservedName?: string[];
                                                    }[];
                                                    extensionRange?: {
                                                        start?: number;
                                                        end?: number;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    oneofDecl?: {
                                                        name?: string;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        messageSetWireFormat?: boolean;
                                                        noStandardDescriptorAccessor?: boolean;
                                                        deprecated?: boolean;
                                                        mapEntry?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[] & ({
                                                    name?: string;
                                                    field?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        proto3Optional?: boolean;
                                                    }[];
                                                    extension?: {
                                                        name?: string;
                                                        number?: number;
                                                        label?: import("../descriptor").FieldDescriptorProto_Label;
                                                        type?: import("../descriptor").FieldDescriptorProto_Type;
                                                        typeName?: string;
                                                        extendee?: string;
                                                        defaultValue?: string;
                                                        oneofIndex?: number;
                                                        jsonName?: string;
                                                        options?: {
                                                            ctype?: import("../descriptor").FieldOptions_CType;
                                                            packed?: boolean;
                                                            jstype?: import("../descriptor").FieldOptions_JSType;
                                                            lazy?: boolean;
                                                            deprecated?: boolean;
                                                            weak?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        proto3Optional?: boolean;
                                                    }[];
                                                    nestedType?: any[];
                                                    enumType?: {
                                                        name?: string;
                                                        value?: {
                                                            name?: string;
                                                            number?: number;
                                                            options?: {
                                                                deprecated?: boolean;
                                                                uninterpretedOption?: {
                                                                    name?: {
                                                                        namePart?: string;
                                                                        isExtension?: boolean;
                                                                    }[];
                                                                    identifierValue?: string;
                                                                    positiveIntValue?: number;
                                                                    negativeIntValue?: number;
                                                                    doubleValue?: number;
                                                                    stringValue?: Uint8Array;
                                                                    aggregateValue?: string;
                                                                }[];
                                                            };
                                                        }[];
                                                        options?: {
                                                            allowAlias?: boolean;
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                        reservedRange?: {
                                                            start?: number;
                                                            end?: number;
                                                        }[];
                                                        reservedName?: string[];
                                                    }[];
                                                    extensionRange?: {
                                                        start?: number;
                                                        end?: number;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    oneofDecl?: {
                                                        name?: string;
                                                        options?: {
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        messageSetWireFormat?: boolean;
                                                        noStandardDescriptorAccessor?: boolean;
                                                        deprecated?: boolean;
                                                        mapEntry?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                enumType?: {
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                }[] & ({
                                                    name?: string;
                                                    value?: {
                                                        name?: string;
                                                        number?: number;
                                                        options?: {
                                                            deprecated?: boolean;
                                                            uninterpretedOption?: {
                                                                name?: {
                                                                    namePart?: string;
                                                                    isExtension?: boolean;
                                                                }[];
                                                                identifierValue?: string;
                                                                positiveIntValue?: number;
                                                                negativeIntValue?: number;
                                                                doubleValue?: number;
                                                                stringValue?: Uint8Array;
                                                                aggregateValue?: string;
                                                            }[];
                                                        };
                                                    }[];
                                                    options?: {
                                                        allowAlias?: boolean;
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                    reservedRange?: {
                                                        start?: number;
                                                        end?: number;
                                                    }[];
                                                    reservedName?: string[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                extensionRange?: {
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    start?: number;
                                                    end?: number;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                oneofDecl?: {
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    name?: string;
                                                    options?: {
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                options?: {
                                                    messageSetWireFormat?: boolean;
                                                    noStandardDescriptorAccessor?: boolean;
                                                    deprecated?: boolean;
                                                    mapEntry?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[] & ({
                                                    start?: number;
                                                    end?: number;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            enumType?: {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            }[] & ({
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[];
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[];
                                                reservedName?: string[];
                                            } & {
                                                name?: string;
                                                value?: {
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                }[] & ({
                                                    name?: string;
                                                    number?: number;
                                                    options?: {
                                                        deprecated?: boolean;
                                                        uninterpretedOption?: {
                                                            name?: {
                                                                namePart?: string;
                                                                isExtension?: boolean;
                                                            }[];
                                                            identifierValue?: string;
                                                            positiveIntValue?: number;
                                                            negativeIntValue?: number;
                                                            doubleValue?: number;
                                                            stringValue?: Uint8Array;
                                                            aggregateValue?: string;
                                                        }[];
                                                    };
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                options?: {
                                                    allowAlias?: boolean;
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                                                reservedRange?: {
                                                    start?: number;
                                                    end?: number;
                                                }[] & ({
                                                    start?: number;
                                                    end?: number;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            extensionRange?: {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                start?: number;
                                                end?: number;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            oneofDecl?: {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                name?: string;
                                                options?: {
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            options?: {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                messageSetWireFormat?: boolean;
                                                noStandardDescriptorAccessor?: boolean;
                                                deprecated?: boolean;
                                                mapEntry?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[] & ({
                                                start?: number;
                                                end?: number;
                                            } & {
                                                start?: number;
                                                end?: number;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        enumType?: {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        }[] & ({
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[];
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[];
                                            reservedName?: string[];
                                        } & {
                                            name?: string;
                                            value?: {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            }[] & ({
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                };
                                            } & {
                                                name?: string;
                                                number?: number;
                                                options?: {
                                                    deprecated?: boolean;
                                                    uninterpretedOption?: {
                                                        name?: {
                                                            namePart?: string;
                                                            isExtension?: boolean;
                                                        }[];
                                                        identifierValue?: string;
                                                        positiveIntValue?: number;
                                                        negativeIntValue?: number;
                                                        doubleValue?: number;
                                                        stringValue?: Uint8Array;
                                                        aggregateValue?: string;
                                                    }[];
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            options?: {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                allowAlias?: boolean;
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                                            reservedRange?: {
                                                start?: number;
                                                end?: number;
                                            }[] & ({
                                                start?: number;
                                                end?: number;
                                            } & {
                                                start?: number;
                                                end?: number;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        extensionRange?: {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            start?: number;
                                            end?: number;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        oneofDecl?: {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            name?: string;
                                            options?: {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        options?: {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            messageSetWireFormat?: boolean;
                                            noStandardDescriptorAccessor?: boolean;
                                            deprecated?: boolean;
                                            mapEntry?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[] & ({
                                            start?: number;
                                            end?: number;
                                        } & {
                                            start?: number;
                                            end?: number;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    enumType?: {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    }[] & ({
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[];
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[];
                                        reservedName?: string[];
                                    } & {
                                        name?: string;
                                        value?: {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        }[] & ({
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            };
                                        } & {
                                            name?: string;
                                            number?: number;
                                            options?: {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[];
                                            } & {
                                                deprecated?: boolean;
                                                uninterpretedOption?: {
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                }[] & ({
                                                    name?: {
                                                        namePart?: string;
                                                        isExtension?: boolean;
                                                    }[];
                                                    identifierValue?: string;
                                                    positiveIntValue?: number;
                                                    negativeIntValue?: number;
                                                    doubleValue?: number;
                                                    stringValue?: Uint8Array;
                                                    aggregateValue?: string;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        options?: {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            allowAlias?: boolean;
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                                        reservedRange?: {
                                            start?: number;
                                            end?: number;
                                        }[] & ({
                                            start?: number;
                                            end?: number;
                                        } & {
                                            start?: number;
                                            end?: number;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    extensionRange?: {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        start?: number;
                                        end?: number;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    oneofDecl?: {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        name?: string;
                                        options?: {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    options?: {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        messageSetWireFormat?: boolean;
                                        noStandardDescriptorAccessor?: boolean;
                                        deprecated?: boolean;
                                        mapEntry?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[] & ({
                                        start?: number;
                                        end?: number;
                                    } & {
                                        start?: number;
                                        end?: number;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                enumType?: {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                }[] & ({
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[];
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[];
                                    reservedName?: string[];
                                } & {
                                    name?: string;
                                    value?: {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    }[] & ({
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        };
                                    } & {
                                        name?: string;
                                        number?: number;
                                        options?: {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[];
                                        } & {
                                            deprecated?: boolean;
                                            uninterpretedOption?: {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            }[] & ({
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[];
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & {
                                                name?: {
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                }[] & ({
                                                    namePart?: string;
                                                    isExtension?: boolean;
                                                } & any & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                                identifierValue?: string;
                                                positiveIntValue?: number;
                                                negativeIntValue?: number;
                                                doubleValue?: number;
                                                stringValue?: Uint8Array;
                                                aggregateValue?: string;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    options?: {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        allowAlias?: boolean;
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                                    reservedRange?: {
                                        start?: number;
                                        end?: number;
                                    }[] & ({
                                        start?: number;
                                        end?: number;
                                    } & {
                                        start?: number;
                                        end?: number;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                extensionRange?: {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    start?: number;
                                    end?: number;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                oneofDecl?: {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    name?: string;
                                    options?: {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                options?: {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    messageSetWireFormat?: boolean;
                                    noStandardDescriptorAccessor?: boolean;
                                    deprecated?: boolean;
                                    mapEntry?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[] & ({
                                    start?: number;
                                    end?: number;
                                } & {
                                    start?: number;
                                    end?: number;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            enumType?: {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            }[] & ({
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[];
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[];
                                reservedName?: string[];
                            } & {
                                name?: string;
                                value?: {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                }[] & ({
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    };
                                } & {
                                    name?: string;
                                    number?: number;
                                    options?: {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[];
                                    } & {
                                        deprecated?: boolean;
                                        uninterpretedOption?: {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        }[] & ({
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[];
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & {
                                            name?: {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            }[] & ({
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & {
                                                namePart?: string;
                                                isExtension?: boolean;
                                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                            identifierValue?: string;
                                            positiveIntValue?: number;
                                            negativeIntValue?: number;
                                            doubleValue?: number;
                                            stringValue?: Uint8Array;
                                            aggregateValue?: string;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                options?: {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    allowAlias?: boolean;
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                                reservedRange?: {
                                    start?: number;
                                    end?: number;
                                }[] & ({
                                    start?: number;
                                    end?: number;
                                } & {
                                    start?: number;
                                    end?: number;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            extensionRange?: {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                start?: number;
                                end?: number;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            oneofDecl?: {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                name?: string;
                                options?: {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            options?: {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                messageSetWireFormat?: boolean;
                                noStandardDescriptorAccessor?: boolean;
                                deprecated?: boolean;
                                mapEntry?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[] & ({
                                start?: number;
                                end?: number;
                            } & {
                                start?: number;
                                end?: number;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        enumType?: {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        }[] & ({
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[];
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[];
                            reservedName?: string[];
                        } & {
                            name?: string;
                            value?: {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            }[] & ({
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                };
                            } & {
                                name?: string;
                                number?: number;
                                options?: {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[];
                                } & {
                                    deprecated?: boolean;
                                    uninterpretedOption?: {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    }[] & ({
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[];
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & {
                                        name?: {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        }[] & ({
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & {
                                            namePart?: string;
                                            isExtension?: boolean;
                                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                        identifierValue?: string;
                                        positiveIntValue?: number;
                                        negativeIntValue?: number;
                                        doubleValue?: number;
                                        stringValue?: Uint8Array;
                                        aggregateValue?: string;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            options?: {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                allowAlias?: boolean;
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                            reservedRange?: {
                                start?: number;
                                end?: number;
                            }[] & ({
                                start?: number;
                                end?: number;
                            } & {
                                start?: number;
                                end?: number;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        extensionRange?: {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            start?: number;
                            end?: number;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        oneofDecl?: {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            name?: string;
                            options?: {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        options?: {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            messageSetWireFormat?: boolean;
                            noStandardDescriptorAccessor?: boolean;
                            deprecated?: boolean;
                            mapEntry?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[] & ({
                            start?: number;
                            end?: number;
                        } & {
                            start?: number;
                            end?: number;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    enumType?: {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    }[] & ({
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[];
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[];
                        reservedName?: string[];
                    } & {
                        name?: string;
                        value?: {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        }[] & ({
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            };
                        } & {
                            name?: string;
                            number?: number;
                            options?: {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[];
                            } & {
                                deprecated?: boolean;
                                uninterpretedOption?: {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                }[] & ({
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[];
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & {
                                    name?: {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    }[] & ({
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & {
                                        namePart?: string;
                                        isExtension?: boolean;
                                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                    identifierValue?: string;
                                    positiveIntValue?: number;
                                    negativeIntValue?: number;
                                    doubleValue?: number;
                                    stringValue?: Uint8Array;
                                    aggregateValue?: string;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        options?: {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            allowAlias?: boolean;
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                        reservedRange?: {
                            start?: number;
                            end?: number;
                        }[] & ({
                            start?: number;
                            end?: number;
                        } & {
                            start?: number;
                            end?: number;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    extensionRange?: {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        start?: number;
                        end?: number;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    oneofDecl?: {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        name?: string;
                        options?: {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    options?: {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        messageSetWireFormat?: boolean;
                        noStandardDescriptorAccessor?: boolean;
                        deprecated?: boolean;
                        mapEntry?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[] & ({
                        start?: number;
                        end?: number;
                    } & {
                        start?: number;
                        end?: number;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["nestedType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                enumType?: {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                }[] & ({
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[];
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[];
                    reservedName?: string[];
                } & {
                    name?: string;
                    value?: {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    }[] & ({
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        };
                    } & {
                        name?: string;
                        number?: number;
                        options?: {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[];
                        } & {
                            deprecated?: boolean;
                            uninterpretedOption?: {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            }[] & ({
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[];
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & {
                                name?: {
                                    namePart?: string;
                                    isExtension?: boolean;
                                }[] & ({
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & {
                                    namePart?: string;
                                    isExtension?: boolean;
                                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                                identifierValue?: string;
                                positiveIntValue?: number;
                                negativeIntValue?: number;
                                doubleValue?: number;
                                stringValue?: Uint8Array;
                                aggregateValue?: string;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    options?: {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        allowAlias?: boolean;
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                    reservedRange?: {
                        start?: number;
                        end?: number;
                    }[] & ({
                        start?: number;
                        end?: number;
                    } & {
                        start?: number;
                        end?: number;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                extensionRange?: {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    start?: number;
                    end?: number;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"][number]["options"], "uninterpretedOption">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"][number], "end" | "start" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["extensionRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                oneofDecl?: {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    name?: string;
                    options?: {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"][number]["options"], "uninterpretedOption">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"][number], "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["oneofDecl"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                options?: {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    messageSetWireFormat?: boolean;
                    noStandardDescriptorAccessor?: boolean;
                    deprecated?: boolean;
                    mapEntry?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["options"], "deprecated" | "uninterpretedOption" | "messageSetWireFormat" | "noStandardDescriptorAccessor" | "mapEntry">, never>;
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[] & ({
                    start?: number;
                    end?: number;
                } & {
                    start?: number;
                    end?: number;
                } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["messageType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            } & Record<Exclude<keyof I["protoFile"][number]["messageType"][number], "name" | "enumType" | "extension" | "options" | "field" | "nestedType" | "extensionRange" | "oneofDecl" | "reservedRange" | "reservedName">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["messageType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            enumType?: {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            }[] & ({
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[];
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[];
                reservedName?: string[];
            } & {
                name?: string;
                value?: {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                }[] & ({
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                } & {
                    name?: string;
                    number?: number;
                    options?: {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        deprecated?: boolean;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"][number], "number" | "name" | "options">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["value"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                options?: {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    allowAlias?: boolean;
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["options"], "deprecated" | "uninterpretedOption" | "allowAlias">, never>;
                reservedRange?: {
                    start?: number;
                    end?: number;
                }[] & ({
                    start?: number;
                    end?: number;
                } & {
                    start?: number;
                    end?: number;
                } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["reservedRange"][number], "end" | "start">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["reservedRange"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                reservedName?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["enumType"][number]["reservedName"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            } & Record<Exclude<keyof I["protoFile"][number]["enumType"][number], "name" | "options" | "reservedRange" | "reservedName" | "value">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["enumType"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            service?: {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            }[] & ({
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[];
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
            } & {
                name?: string;
                method?: {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                }[] & ({
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    };
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                } & {
                    name?: string;
                    inputType?: string;
                    outputType?: string;
                    options?: {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[];
                    } & {
                        deprecated?: boolean;
                        idempotencyLevel?: import("../descriptor").MethodOptions_IdempotencyLevel;
                        uninterpretedOption?: {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        }[] & ({
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[];
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & {
                            name?: {
                                namePart?: string;
                                isExtension?: boolean;
                            }[] & ({
                                namePart?: string;
                                isExtension?: boolean;
                            } & {
                                namePart?: string;
                                isExtension?: boolean;
                            } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                            identifierValue?: string;
                            positiveIntValue?: number;
                            negativeIntValue?: number;
                            doubleValue?: number;
                            stringValue?: Uint8Array;
                            aggregateValue?: string;
                        } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"][number]["options"], "deprecated" | "uninterpretedOption" | "idempotencyLevel">, never>;
                    clientStreaming?: boolean;
                    serverStreaming?: boolean;
                } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"][number], "name" | "options" | "inputType" | "outputType" | "clientStreaming" | "serverStreaming">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["service"][number]["method"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                options?: {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    deprecated?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["service"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["service"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["service"][number]["options"], "deprecated" | "uninterpretedOption">, never>;
            } & Record<Exclude<keyof I["protoFile"][number]["service"][number], "name" | "options" | "method">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["service"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            extension?: {
                name?: string;
                number?: number;
                label?: import("../descriptor").FieldDescriptorProto_Label;
                type?: import("../descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                proto3Optional?: boolean;
            }[] & ({
                name?: string;
                number?: number;
                label?: import("../descriptor").FieldDescriptorProto_Label;
                type?: import("../descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                };
                proto3Optional?: boolean;
            } & {
                name?: string;
                number?: number;
                label?: import("../descriptor").FieldDescriptorProto_Label;
                type?: import("../descriptor").FieldDescriptorProto_Type;
                typeName?: string;
                extendee?: string;
                defaultValue?: string;
                oneofIndex?: number;
                jsonName?: string;
                options?: {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[];
                } & {
                    ctype?: import("../descriptor").FieldOptions_CType;
                    packed?: boolean;
                    jstype?: import("../descriptor").FieldOptions_JSType;
                    lazy?: boolean;
                    deprecated?: boolean;
                    weak?: boolean;
                    uninterpretedOption?: {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    }[] & ({
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[];
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & {
                        name?: {
                            namePart?: string;
                            isExtension?: boolean;
                        }[] & ({
                            namePart?: string;
                            isExtension?: boolean;
                        } & {
                            namePart?: string;
                            isExtension?: boolean;
                        } & Record<Exclude<keyof I["protoFile"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["extension"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                        identifierValue?: string;
                        positiveIntValue?: number;
                        negativeIntValue?: number;
                        doubleValue?: number;
                        stringValue?: Uint8Array;
                        aggregateValue?: string;
                    } & Record<Exclude<keyof I["protoFile"][number]["extension"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["extension"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["extension"][number]["options"], "deprecated" | "uninterpretedOption" | "ctype" | "packed" | "jstype" | "lazy" | "weak">, never>;
                proto3Optional?: boolean;
            } & Record<Exclude<keyof I["protoFile"][number]["extension"][number], "number" | "label" | "name" | "options" | "type" | "typeName" | "extendee" | "defaultValue" | "oneofIndex" | "jsonName" | "proto3Optional">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["extension"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            options?: {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[];
            } & {
                javaPackage?: string;
                javaOuterClassname?: string;
                javaMultipleFiles?: boolean;
                javaGenerateEqualsAndHash?: boolean;
                javaStringCheckUtf8?: boolean;
                optimizeFor?: import("../descriptor").FileOptions_OptimizeMode;
                goPackage?: string;
                ccGenericServices?: boolean;
                javaGenericServices?: boolean;
                pyGenericServices?: boolean;
                phpGenericServices?: boolean;
                deprecated?: boolean;
                ccEnableArenas?: boolean;
                objcClassPrefix?: string;
                csharpNamespace?: string;
                swiftPrefix?: string;
                phpClassPrefix?: string;
                phpNamespace?: string;
                phpMetadataNamespace?: string;
                rubyPackage?: string;
                uninterpretedOption?: {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                }[] & ({
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[];
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                } & {
                    name?: {
                        namePart?: string;
                        isExtension?: boolean;
                    }[] & ({
                        namePart?: string;
                        isExtension?: boolean;
                    } & {
                        namePart?: string;
                        isExtension?: boolean;
                    } & Record<Exclude<keyof I["protoFile"][number]["options"]["uninterpretedOption"][number]["name"][number], "namePart" | "isExtension">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["options"]["uninterpretedOption"][number]["name"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    identifierValue?: string;
                    positiveIntValue?: number;
                    negativeIntValue?: number;
                    doubleValue?: number;
                    stringValue?: Uint8Array;
                    aggregateValue?: string;
                } & Record<Exclude<keyof I["protoFile"][number]["options"]["uninterpretedOption"][number], "name" | "identifierValue" | "positiveIntValue" | "negativeIntValue" | "doubleValue" | "stringValue" | "aggregateValue">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["options"]["uninterpretedOption"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            } & Record<Exclude<keyof I["protoFile"][number]["options"], "javaPackage" | "javaOuterClassname" | "javaMultipleFiles" | "javaGenerateEqualsAndHash" | "javaStringCheckUtf8" | "optimizeFor" | "goPackage" | "ccGenericServices" | "javaGenericServices" | "pyGenericServices" | "phpGenericServices" | "deprecated" | "ccEnableArenas" | "objcClassPrefix" | "csharpNamespace" | "swiftPrefix" | "phpClassPrefix" | "phpNamespace" | "phpMetadataNamespace" | "rubyPackage" | "uninterpretedOption">, never>;
            sourceCodeInfo?: {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[];
            } & {
                location?: {
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                }[] & ({
                    path?: number[];
                    span?: number[];
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[];
                } & {
                    path?: number[] & number[] & Record<Exclude<keyof I["protoFile"][number]["sourceCodeInfo"]["location"][number]["path"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    span?: number[] & number[] & Record<Exclude<keyof I["protoFile"][number]["sourceCodeInfo"]["location"][number]["span"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    leadingComments?: string;
                    trailingComments?: string;
                    leadingDetachedComments?: string[] & string[] & Record<Exclude<keyof I["protoFile"][number]["sourceCodeInfo"]["location"][number]["leadingDetachedComments"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                } & Record<Exclude<keyof I["protoFile"][number]["sourceCodeInfo"]["location"][number], "span" | "path" | "leadingComments" | "trailingComments" | "leadingDetachedComments">, never>)[] & Record<Exclude<keyof I["protoFile"][number]["sourceCodeInfo"]["location"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            } & Record<Exclude<keyof I["protoFile"][number]["sourceCodeInfo"], "location">, never>;
            syntax?: string;
        } & Record<Exclude<keyof I["protoFile"][number], "name" | "package" | "dependency" | "publicDependency" | "weakDependency" | "messageType" | "enumType" | "service" | "extension" | "options" | "sourceCodeInfo" | "syntax">, never>)[] & Record<Exclude<keyof I["protoFile"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
        compilerVersion?: {
            major?: number;
            minor?: number;
            patch?: number;
            suffix?: string;
        } & {
            major?: number;
            minor?: number;
            patch?: number;
            suffix?: string;
        } & Record<Exclude<keyof I["compilerVersion"], "major" | "minor" | "patch" | "suffix">, never>;
    } & Record<Exclude<keyof I, "fileToGenerate" | "parameter" | "protoFile" | "compilerVersion">, never>>(object: I): CodeGeneratorRequest;
};
export declare const CodeGeneratorResponse: {
    encode(message: CodeGeneratorResponse, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CodeGeneratorResponse;
    fromJSON(object: any): CodeGeneratorResponse;
    toJSON(message: CodeGeneratorResponse): unknown;
    fromPartial<I extends {
        error?: string;
        supportedFeatures?: number;
        file?: {
            name?: string;
            insertionPoint?: string;
            content?: string;
            generatedCodeInfo?: {
                annotation?: {
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                }[];
            };
        }[];
    } & {
        error?: string;
        supportedFeatures?: number;
        file?: {
            name?: string;
            insertionPoint?: string;
            content?: string;
            generatedCodeInfo?: {
                annotation?: {
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                }[];
            };
        }[] & ({
            name?: string;
            insertionPoint?: string;
            content?: string;
            generatedCodeInfo?: {
                annotation?: {
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                }[];
            };
        } & {
            name?: string;
            insertionPoint?: string;
            content?: string;
            generatedCodeInfo?: {
                annotation?: {
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                }[];
            } & {
                annotation?: {
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                }[] & ({
                    path?: number[];
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                } & {
                    path?: number[] & number[] & Record<Exclude<keyof I["file"][number]["generatedCodeInfo"]["annotation"][number]["path"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                    sourceFile?: string;
                    begin?: number;
                    end?: number;
                } & Record<Exclude<keyof I["file"][number]["generatedCodeInfo"]["annotation"][number], "end" | "path" | "sourceFile" | "begin">, never>)[] & Record<Exclude<keyof I["file"][number]["generatedCodeInfo"]["annotation"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
            } & Record<Exclude<keyof I["file"][number]["generatedCodeInfo"], "annotation">, never>;
        } & Record<Exclude<keyof I["file"][number], "name" | "insertionPoint" | "content" | "generatedCodeInfo">, never>)[] & Record<Exclude<keyof I["file"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
    } & Record<Exclude<keyof I, "error" | "file" | "supportedFeatures">, never>>(object: I): CodeGeneratorResponse;
};
export declare const CodeGeneratorResponse_File: {
    encode(message: CodeGeneratorResponse_File, writer?: Writer): Writer;
    decode(input: Reader | Uint8Array, length?: number): CodeGeneratorResponse_File;
    fromJSON(object: any): CodeGeneratorResponse_File;
    toJSON(message: CodeGeneratorResponse_File): unknown;
    fromPartial<I extends {
        name?: string;
        insertionPoint?: string;
        content?: string;
        generatedCodeInfo?: {
            annotation?: {
                path?: number[];
                sourceFile?: string;
                begin?: number;
                end?: number;
            }[];
        };
    } & {
        name?: string;
        insertionPoint?: string;
        content?: string;
        generatedCodeInfo?: {
            annotation?: {
                path?: number[];
                sourceFile?: string;
                begin?: number;
                end?: number;
            }[];
        } & {
            annotation?: {
                path?: number[];
                sourceFile?: string;
                begin?: number;
                end?: number;
            }[] & ({
                path?: number[];
                sourceFile?: string;
                begin?: number;
                end?: number;
            } & {
                path?: number[] & number[] & Record<Exclude<keyof I["generatedCodeInfo"]["annotation"][number]["path"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
                sourceFile?: string;
                begin?: number;
                end?: number;
            } & Record<Exclude<keyof I["generatedCodeInfo"]["annotation"][number], "end" | "path" | "sourceFile" | "begin">, never>)[] & Record<Exclude<keyof I["generatedCodeInfo"]["annotation"], number | "toString" | "toLocaleString" | "concat" | "indexOf" | "lastIndexOf" | "slice" | "length" | "includes" | "push" | "reverse" | "map" | "filter" | "pop" | "join" | "shift" | "sort" | "splice" | "unshift" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, never>;
        } & Record<Exclude<keyof I["generatedCodeInfo"], "annotation">, never>;
    } & Record<Exclude<keyof I, "name" | "insertionPoint" | "content" | "generatedCodeInfo">, never>>(object: I): CodeGeneratorResponse_File;
};
